import React, { useState } from 'react';
//Get data with easy way
const departments = require('../data_modules/Departments.json');
const roles = require('../data_modules/Roles.json');

function EmployeeForm() {
    // State for form inputs
    const [name, setName] = useState('');
    const [department, setDepartment] = useState('');
    const [role, setRole] = useState('');
    //this one is for only form errors
    const [errors, setErrors] = useState({});
    const [notification, setNotification] = useState({ visible: false, message: '', type: '' });

    const setDefaultValues = () => {
        setName('');
        setDepartment('');
        setRole('');
        setErrors({});
    };

    const handleSubmit = (e) => {
        e.preventDefault();

        // Validate form inputs
        const validationErrors = {};
        if (!name.trim()) {
            validationErrors.name = 'Name is required';
        }
        if (!department) {
            validationErrors.department = 'Department is required';
        }
        if (!role) {
            validationErrors.role = 'Role is required';
        }

        
        if (Object.keys(validationErrors).length > 0) {
            setErrors(validationErrors);
            setNotification({ visible: true, message: 'Please fix the errors before submitting form.', type: 'error' });
            setTimeout(() => {
                setNotification({ visible: false, message: '', type: '' });
            }, 3000);
            return;
        }

        
        const employeeData = {
            name,
            department,
            role
        };

        try {
            
            const employees = JSON.parse(localStorage.getItem('employees') || '[]');
            employees.push(employeeData);
            localStorage.setItem('employees', JSON.stringify(employees));

            setNotification({ visible: true, message: 'Employee saved successfully!', type: 'success' });

            setTimeout(() => {
                setNotification({ visible: false, message: '', type: '' });
            }, 3000);

            // Reset to defaults, so the user feels it is saved
            setDefaultValues();
        } catch (error) {
            // Show error notification if any error occured
            setNotification({ visible: true, message: 'Failed to save employee. Please try again.', type: 'error' });
            setTimeout(() => {
                setNotification({ visible: false, message: '', type: '' });
            }, 3000);
        }
    };

    return (
        <div className="employee-form-container">
            <h2>Add New Employee</h2>
            <form onSubmit={handleSubmit}>
                <div className="form-group">
                    <label htmlFor="name">Name:</label>
                    <input
                        type="text"
                        id="name"
                        value={name}
                        onChange={(e) => setName(e.target.value)}
                        className={errors.name ? 'input-error' : ''}
                    />
                    {errors.name && <span className="error-message">{errors.name}</span>}
                </div>
                <div className="form-group">
                    <label htmlFor="department">Department:</label>
                    <select
                        id="department"
                        value={department}
                        onChange={(e) => setDepartment(e.target.value)}
                        className={errors.department ? 'input-error' : ''}
                    >
                        <option value="">Select Department</option>
                        {departments.map((dept) => (
                            <option key={dept.id} value={dept.name}>
                                {dept.name}
                            </option>
                        ))}
                    </select>
                    {errors.department && <span className="error-message">{errors.department}</span>}
                </div>
                <div className="form-group">
                    <label htmlFor="role">Role:</label>
                    <select
                        id="role"
                        value={role}
                        onChange={(e) => setRole(e.target.value)}
                        className={errors.role ? 'input-error' : ''}
                    >
                        <option value="">Select Role</option>
                        {roles.map((role) => (
                            <option key={role.id} value={role.name}>
                                {role.name}
                            </option>
                        ))}
                    </select>
                    {errors.role && <span className="error-message">{errors.role}</span>}
                </div>
                <button type="submit" className="submit-button">
                    Save Employee
                </button>
            </form>
            {notification.visible && (
                <div className={`notification ${notification.type}`}>
                    {notification.message}
                </div>
            )}
        </div>
    );
}

export default EmployeeForm;